{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/FPinJS/5/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"1538b738-90b5-5334-82ca-773c4e1c9631","excerpt":"모듈성 modularity…","html":"<h3>모듈성</h3>\n<p>modularity 는 프로그램을 더 작고 독립적인 부분으로 나눌 수 있는 정도를 뜻합니다.</p>\n<h3>파이프 라인</h3>\n<p>파이프라인이란 한 함수의 출력이 다음 함수의 입력이 되게끔 느슨하게 배열한,<br>\n방향성 함수 순차열입니다.</p>\n<p>함수 입출력을 서로 연결지어 느슨하게 결합된 컴포넌트를 만듭니다</p>\n<p>함수형 프로그래밍에서는 파이프라인이 프로그램을 구축하는 유일한 수단입니다.<br>\n각 함수는 두가지 측면에서 입력과 출력이 서로 호환돼야 합니다.  </p>\n<ul>\n<li>형식 : 한 함수의 반환 형식과 수신함수의 인수 형식이 일치해야 합니다.  </li>\n<li>항수 : 수신 함수는 앞 단계 함수가 반환한 값을 처리하기 위해 적어도 하나 이상의 매개 변수를 선언해야 합니다</li>\n</ul>\n<h3>currying</h3>\n<p>currying 은 다 변수 함수가 인수를 전부 받을때까지 실행을 보류, 지연시켜<br>\n단계별로 나뉜 단항함수의 순차열로 전환하는 기법입니다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstArg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">secondArg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>firstarg<span class=\"token punctuation\">,</span>secondArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>커링의 대용품인 부분적용, 매개변수 바인딩은 자바스크립트에서도 어느정도 지원되는 기법입니다.</p>\n<h3>currying vs 부분적용</h3>\n<p>커링 </p>\n<ul>\n<li>부분 호출 할때마다 단항함수를 중첩 생성하며<br>\n내부적으로는 이를 단계별로 합성하여 최종 결과를 냅니다.</li>\n<li>여러 인수를 부분 평가하는 식으로도 변용할 수 있어서 개발자가<br>\n평가 시점과 방법을 좌지우지 할 수 있습니다.</li>\n</ul>\n<p>활용용도 </p>\n<ul>\n<li>함수 팩토리를 모방  </li>\n<li>재사용 가능한 모듈적 함수 템플릿을 구현  </li>\n</ul>\n<p>부분 적용 </p>\n<ul>\n<li>함수인수를 미리 정의된 값으로 묶은 후 인수가 적은 함수를 새로 만듭니다.  </li>\n<li>\n<p>함수는 자신의 클로져에 고정된 매개변수를 갖고 있으며,<br>\n후속 호출 시 이미 평가를 마친 상태 입니다.</p>\n<blockquote>\n<p>커링은 부분 적용을 자동화했다. </p>\n</blockquote>\n</li>\n</ul>\n<p>활용 용도.. </p>\n<blockquote>\n<p>예) setTimeout에는 this레퍼런스는 전역 콘택스트인 window객체를 가르켜야 별탈 없이 잘 작동합니다.\nsetTimeout을 만약에 객체의 메서드로 실행하려고 한다면 이를 참고해야 한다.</p>\n</blockquote>\n<h3>함수 합성</h3>\n<p>함수 합성이란 복잡한 작업을 한데 묶어 간단한 작업으로 쪼개는 과정입니다<br>\n함수 합성의 예..  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> grades <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// zip : 인접한 배열 원소끼리 짝지어 새로운 배열을 만듭니다.</span>\n<span class=\"token comment\">// R.prop : 정렬할 값을 정합니다.</span>\n<span class=\"token comment\">// R.sortBy : 주어진 속성을 기본 오름차순으로 정렬</span>\n<span class=\"token comment\">// R.reverse : 배열을 거꾸로 뒤집으면 첫번째 원소가 최고 득점</span>\n<span class=\"token comment\">// R.plunk : 주어진 인덱스에 위치한 원소를 추출해서 새 배열을 만듭니다. (0) = > 학생 이름</span>\n<span class=\"token comment\">// R.head : 첫번째 원소를 얻습니다.</span>\n\n<span class=\"token keyword\">const</span> smartestStudent <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>zip\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>함수 조합기 function combinator</h3>\n<p>기본 장치를 조함하여 제어 로직처럼 작동할 수 있는 고계함수입니다  </p>\n<ol>\n<li>항등\n주어진 인수와 똑같은 값을 반환하는 함수  </li>\n<li>탭\n코드 추가 없이 공형함수를 연결하여 합성할때 유용합니다<br>\n입력객체 a와 함수 하나를 받아 a에 이 함수를 실행하고 다시 a를 반환합니다.<br>\n(로깅 함수에 활용..)  </li>\n<li>선택 조합기<br>\n함수 2개를 인수로 받아 첫번째 함수의 결과가 있으면<br>\n(결과가 (false, null, undefined)가 아니면) 그대로 반환<br>\n그렇지 않으면 두번째 함수의 결과를 반환합니다  </li>\n<li>순차열 (S-조합기)<br>\n2개 또는 더 많은 함수를 인수로 받아 동일한 값에 대해<br>\n각 함수를 차례로 실행하는 또 다른 함수를 반환합니다.  </li>\n<li>포크 조합기<br>\n하나의 자원을 두가지 방법으로 처리후 그 결과를 다시 조합합니다.<br>\njoin함수와 주어진 입력을 처리할 종단함수 두개를 받습니다.  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> computeAverageGrade <span class=\"token operator\">=</span>\n<span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>getLetterGrade<span class=\"token punctuation\">,</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>divide<span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"CHAPTER 4 - 재사용 가능한, 모듈적인 코드로","date":null,"description":null}}},"pageContext":{"slug":"/FP/FPinJS/5/","previous":{"fields":{"slug":"/FP/FPinJS/4/"},"frontmatter":{"title":"CHAPTER 3 - 자료구조는 적게, 일은 더 많이"}},"next":{"fields":{"slug":"/FP/FPinJS/6/"},"frontmatter":{"title":"CHAPTER 6 - 복잡성을 줄이는 디자인 패턴"}}}}}