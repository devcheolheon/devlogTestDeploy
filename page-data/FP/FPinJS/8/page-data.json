{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/FPinJS/8/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"13e76a7a-5a2c-538c-9554-963109bd31fa","excerpt":"프라미스 프라미스라는 모나드를 소개합니다.   ES6는 프라미스/A+ 라는 공개 표준을 채택했습니다. 기본적인 프라미스 객체는 이렇게 구성합니다.   Promise.then(f) 는 함수자의 fmap과 유사한 then…","html":"<h3>프라미스</h3>\n<p>프라미스라는 모나드를 소개합니다.  </p>\n<p>ES6는 프라미스/A+ 라는 공개 표준을 채택했습니다.<br>\n기본적인 프라미스 객체는 이렇게 구성합니다.  </p>\n<p>Promise.then(f) 는 함수자의 fmap과 유사한 then메서드를 지닙니다.<br>\n어떤 연산을 수행하고 다시 프라미스 형태로 되돌리는 매서드죠  </p>\n<p>promise.then(f)는 데이터 변환 작업을 서로 체이닝하고 여러 함수를 제때 끌어모아 함수 사이의<br>\n일시적인 결합을 추상하는 용도로 쓰입니다.  </p>\n<p>에러 콜백은, 마지막 단계에 catch메서드에 일임하는 방법도 있습니다  </p>\n<p>프라미즈는 비동기 흐름을 숨기지만 시간 관념은 then으로 분명히 드러내기 때문에\ngetJson(url)을 getJson(db) 으로 쉽게 바꿀 수 있고 코드는 정확히 작동합니다.</p>\n<p>이런 수준의 유연성을 위치 투명성(location transperancy)라고 합니다.</p>\n<p>점수를 조회하는 작업을 직렬화하지 않고 동시에 진행할 수 있습니다.\nPromise.all 이를 이용하면 한 번에 여러 데이터를 내려받는 브라우져의 능력을 극대화 할 수 있습니다.</p>","frontmatter":{"title":"CHAPTER 8 - 비동기 이벤트와 데이터를 관리","date":null,"description":null}}},"pageContext":{"slug":"/FP/FPinJS/8/","previous":{"fields":{"slug":"/FP/FPinJS/6/"},"frontmatter":{"title":"CHAPTER 6 - 복잡성을 줄이는 디자인 패턴"}},"next":{"fields":{"slug":"/FP/FPinJS/9/"},"frontmatter":{"title":"APPENDIX"}}}}}